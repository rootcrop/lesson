# pip install fastapi, uvicorn
# run: python3 -m uvicorn module16_3:app  # http://127.0.0.1:8000/docs

from fastapi import FastAPI, Path   # Path для проверки переменных
from typing import Annotated        # Annotated для проверки переменных (с версии 3.9)
from fastapi import HTTPException

# основные запросы FastAPI
# Get       это обычно адрес в строке ?переменная=значение   или ?question=answer
# Post      это формы - оформить заказ в магазин
# Put       обновить, заменить
# Delete

app = FastAPI()     # инициализация приложения FastAPI

user_db = {'1': 'Имя: Example, возраст: 18'}

# база данных:      Create, Read,   Edit,   Update, Delete
# типы запросов     post    get             put     delete

@app.get('/')               # маршрутизация / routing
async def get_users():      # на вход функции ничего нет
    return {"message":"root"}

@app.get('/users')
async def get_users() -> dict:
    return user_db

@app.post('/user/{username}/{age}')                             # добавление через метод POST
async def add_user (username: str, age: int ) -> str:           # http://127.0.0.1:8000/user/alex/11
    current_index = str(int(max(user_db, key=int))+1)           # находим последнее максимальное значение в базе и +1
    user_db [current_index]= f'Имя: {username}, возраст: {age}'
    return f'User {current_index} is registered'

                                                # Метод PUT заменяет существующую запись новой, по её ID.
@app.put('/user/{user_id}/{username}/{age}')    # Update / создаем асинхронную функцию обновления сообщения
async def update_user (user_id: int, username: str, age: int):
    try:
        user_db[str(user_id)] # чтобы получить доступ к словарю переводим int в str
        user_db[user_id] = f'Имя: {username}, возраст: {age}'    # обновляем сообщение
        msg=f'The user {user_id} is updated'
    except:
        raise HTTPException (status_code=404, detail='user ID not found')  # не находим: выводим 404
    return msg

@app.delete('/user/{user_id}')        # Delete / создаем асинхронную функцию удаления конкретного юзера
async def delete_messages (user_id: str) -> str:
    try:
        user_db.pop(user_id)          # удаляем сообщение с message_id
    except:
        raise HTTPException(status_code=404, detail='user ID not found')  # не находим: выводим 404
    return f'user with ID {user_id} was delited'

@app.delete('/')
async def delete_all_users () -> str:
    user_db.clear()
    return 'all users deleted'


'''
1. PATCH — Частичное обновление данных
    Описание: Используется для частичного обновления ресурса, в отличие от PUT, который предполагает полное обновление. 
    Например, если у задачи есть несколько полей, PATCH позволяет изменить только одно из них, не затрагивая остальные.
    
2. OPTIONS — Запрос доступных методов
    Описание: Возвращает информацию о поддерживаемых методах для конкретного ресурса. Полезен для клиента, чтобы определить, 
    какие методы поддерживает API для данного маршрута.
    Пример: Этот метод не требует явной реализации в FastAPI, так как FastAPI автоматически поддерживает OPTIONS для всех маршрутов.

3. HEAD — Получение заголовков ответа
    Описание: Аналогичен GET, но возвращает только заголовки ответа без тела. Полезен для проверки существования ресурса 
    или получения метаданных без загрузки всего содержимого.
    Пример: Как и OPTIONS, HEAD также поддерживается автоматически, и его не нужно реализовывать отдельно.

4. CONNECT — Установка туннеля
    Описание: Этот метод используется для установления туннелей, обычно при проксировании запросов. В контексте API 
    редко используется, но имеет значение для прокси-серверов и безопасного соединения через HTTPS.

5. TRACE — Диагностика маршрута
    Описание: Этот метод позволяет клиенту получить от сервера отправленный запрос в точности таким, каким 
    его получил сервер, для целей диагностики или отладки.
    Замечание: TRACE редко используется и может быть отключён по соображениям безопасности, так как 
    его поддержка может привести к утечке данных о маршруте.

Дополнительные запросы, специфичные для некоторых API:
    Некоторые API или спецификации используют дополнительные, нестандартные методы, такие как PURGE (удаление данных кэша) 
    или LOCK/UNLOCK для управления доступом. Эти методы не являются частью официального HTTP-спецификации, 
    но могут поддерживаться в специфичных приложениях.

Заключение
    Хотя GET, POST, PUT и DELETE — это наиболее часто используемые методы для реализации CRUD, другие методы, 
    такие как PATCH, OPTIONS, HEAD, также имеют свои применения и важны для полного контроля и диагностики API (Рис.20).

Основные неочевидные моменты и потенциальные ошибки:
    1) Типизация и автоматическая проверка типов. FastAPI автоматически проверяет, что параметры маршрута и тела 
    запроса соответствуют заданным типам. Если тип не соответствует, FastAPI вернет ошибку.
    2) HTTPException. Для обработки ошибок можно использовать HTTPException, которая возвращает статусный код 
    ошибки и сообщение. Это улучшает обработку ошибок и информирует пользователя о проблеме.
    3) Удаление записей. Будьте внимательны с удалением записей в списках — используйте enumerate для доступа 
    к индексу и удаления задачи
'''
